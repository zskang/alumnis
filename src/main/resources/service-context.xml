<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd ">
	<!-- 对所有的实体类进行扫描，完成Bean的创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.nethsoft">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 数据源配置 -->
	<bean id="preferences" class="com.nethsoft.core.factory.config.PropertyPlaceholderConfigurerExt">
		<!-- 指定数据库配置文件路径 -->
		<property name="locations">
			<list>
				<value>classpath:jdbc_mysql.properties</value>
			</list>
		</property>
	</bean>
	<!-- 定义数据源Bean,使用C3P0数据源实现 -->
	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" /><!--
		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />-->
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
		<property name="filters" value="${jdbc.filters}" />
	</bean>
	<!-- 主数据源 -->
	<bean id="masterDataSource" parent="parentDataSource">
		<!-- 数据源名称 -->
		<property name="name" value="alumniMasterDataSource" />
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClassName" value="${jdbc.master.driver}" />
		<!-- 指定连接数据库的URL -->
		<property name="url" value="${jdbc.master.url}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="username" value="${jdbc.master.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.master.password}" />
	</bean>
	<!-- 从数据源 -->
	<bean id="slaveDataSource" parent="parentDataSource">
		<!-- 数据源名称 -->
		<property name="name" value="alumniSlaveDataSource" />
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClassName" value="${jdbc.slave.driver}" />
		<!-- 指定连接数据库的URL -->
		<property name="url" value="${jdbc.slave.url}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="username" value="${jdbc.slave.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.slave.password}" />
	</bean>
	<!-- 多数据源切换器 -->
	<bean id="multiDataSource" class="com.nethsoft.orm.datasource.DataSourceSwitcher">
		<!-- 绑定默认数据源 -->
		<property name="dataSource" ref="masterDataSource" />
	</bean>
	<bean id="multiDataSourceAdvice" class="com.nethsoft.orm.datasource.DataSourceSwitcherAdvice">
		<property name="autoSwitch" value="false" />
	</bean>
	<!-- 数据源自动切换 -->
	<aop:config>
		<aop:pointcut id="dataSourceAdvicePointcut" expression="execution(* com.nethsoft.web.service..*.*(..))" />
		<aop:advisor pointcut-ref="dataSourceAdvicePointcut" advice-ref="multiDataSourceAdvice"></aop:advisor>
	</aop:config>
	<!-- 集成Hibernate -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="multiDataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.nethsoft.web.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
	</bean>
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="put*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="use*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="record*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="lock*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="execute*" propagation="REQUIRED" rollback-for="Exception" />
			<!--hibernate5必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<!-- 只对Service层实施事务 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.nethsoft.web.service..*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>
	<!-- 配置ApplicationContextHelper -->
	<bean class="com.nethsoft.core.support.ApplicationContextHelper" />
	<!-- 注入DaseDao -->
	<bean id="baseHibernateDaoImpl" class="com.nethsoft.orm.dao.BaseHibernateDaoImpl" />
	<!-- 插件注册器 -->
	<bean id="pluginRegister" class="com.nethsoft.core.plugin.PluginRegister" init-method="init" destroy-method="destory" />
	<!-- 插件拦截器 -->
	<bean id="pluginAdvice" class="com.nethsoft.core.plugin.PluginAdvice" />
	<!-- Druid Spring监控 -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.nethsoft.web.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:pointcut id="pluginAdvicePointcut" expression="execution(* com.nethsoft.web..*.*(..))" />
		<aop:advisor pointcut-ref="pluginAdvicePointcut" advice-ref="pluginAdvice"></aop:advisor>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

</beans>